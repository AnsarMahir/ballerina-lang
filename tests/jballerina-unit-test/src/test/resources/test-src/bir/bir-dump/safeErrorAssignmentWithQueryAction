safeErrorAssignmentWithQueryAction function() -> error|() {
    %0(RETURN) error|();
    %1(SYNTHETIC) ();
    %2(SYNTHETIC) error|();
    %4(TEMP) boolean;
    %8(SYNTHETIC) error;
    %11(LOCAL) error;
    %13(LOCAL) int;
    %15(SYNTHETIC) ();
    %16(SYNTHETIC) error|();
    %28(SYNTHETIC) int;
    %29(SYNTHETIC) int;
    %30(SYNTHETIC) int|error;
    %39(SYNTHETIC) ();
    %40(SYNTHETIC) error|();
    %41(SYNTHETIC) ballerina/lang.__internal:0.0.0:$anonType$return$createIntRange$_0;
    %43(SYNTHETIC) int;
    %45(SYNTHETIC) int;
    %49(TEMP) ballerina/lang.__internal:0.0.0:$anonType$return$createIntRange$_0;
    %50(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamPipeline;
    %51(SYNTHETIC) ballerina/lang.__internal:0.0.0:$anonType$return$createIntRange$_0;
    %53(SYNTHETIC) typeDesc<error|()>;
    %55(SYNTHETIC) typeDesc<error|()>;
    %61(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamFunction;
    %62(SYNTHETIC) function(ballerina/lang.query:0.0.0:_Frame) -> ballerina/lang.query:0.0.0:_Frame|error|();
    %66(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamPipeline;
    %68(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamFunction;
    %72(TEMP) ();
    %73(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamFunction;
    %74(SYNTHETIC) function(ballerina/lang.query:0.0.0:_Frame) -> any|error;
    %78(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamPipeline;
    %80(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamFunction;
    %84(TEMP) ();
    %85(SYNTHETIC) stream<typeRefDesc<>, typeRefDesc<>>;
    %86(SYNTHETIC) ballerina/lang.query:0.0.0:_StreamPipeline;
    %90(SYNTHETIC) error|();
    %92(SYNTHETIC) stream<typeRefDesc<>, typeRefDesc<>>;
    %95(TEMP) any|error{map<ballerina/lang.value:0.0.0:Cloneable>};
    %98(TEMP) boolean;
    %109(SYNTHETIC) ();
    %110(SYNTHETIC) typeRefDesc<>|();
    %119(SYNTHETIC) ();
    %120(SYNTHETIC) error{map<ballerina/lang.value:0.0.0:Cloneable>}|();
    %128(LOCAL) string;
    %130(SYNTHETIC) ();
    %131(SYNTHETIC) error|();
    %140(SYNTHETIC) ();
    %141(SYNTHETIC) Error|();
    %151(SYNTHETIC) ();
    %152(SYNTHETIC) Error|();

    bb0 {
        %2 = foo() -> bb1;
    }
    bb1 {
        %4 = %2 is ();
        %4? bb2 : bb3;
    }
    bb2 {
        %1 = <()> %2;
        GOTO bb9;
    }
    bb3 {
        %8 = <error> %2;
        GOTO bb4;
    }
    bb4 {
        %11 = %8;
        %13 = ConstLoad 10;
        %16 = foo() -> bb5;
    }
    bb5 {
        %4 = %16 is ();
        %4? bb6 : bb7;
    }
    bb6 {
        %15 = <()> %16;
        GOTO bb8;
    }
    bb7 {
        %8 = <error> %16;
        %0 = %8;
        GOTO bb47;
    }
    bb8 {
        %0 = %11;
        GOTO bb47;
    }
    bb9 {
        %30 = bar() -> bb10;
    }
    bb10 {
        %4 = %30 is int;
        %4? bb11 : bb12;
    }
    bb11 {
        %29 = <int> %30;
        GOTO bb13;
    }
    bb12 {
        %8 = <error> %30;
        GOTO bb4;
    }
    bb13 {
        %28 = %29;
        %43 = ConstLoad 1;
        %45 = ConstLoad 2;
        %49 = createIntRange(%43, %45) -> bb14;
    }
    bb14 {
        %41 = <ballerina/lang.__internal:0.0.0:$anonType$return$createIntRange$_0> %49;
        %51 = %41;
        %53 = newType error|();
        %55 = newType error|();
        %50 = createPipeline(%51, %53, %55) -> bb15;
    }
    bb15 {
        %62 = fp $anon/.:0.0.0::$streamLambda$_0;
        %61 = createInputFunction(%62) -> bb16;
    }
    bb16 {
        %66 = %50;
        %68 = %61;
        %72 = addStreamFunction(%66, %68) -> bb17;
    }
    bb17 {
        %74 = fp $anon/.:0.0.0::$streamLambda$_1;
        %73 = createDoFunction(%74) -> bb18;
    }
    bb18 {
        %78 = %50;
        %80 = %73;
        %84 = addStreamFunction(%78, %80) -> bb19;
    }
    bb19 {
        %86 = %50;
        %85 = getStreamFromPipeline(%86) -> bb20;
    }
    bb20 {
        %92 = %85;
        %95 = consumeStream(%92) -> bb21;
    }
    bb21 {
        %90 = <error|()> %95;
        %4 = %90 is ();
        %98 = not %4;
        %98? bb22 : bb23;
    }
    bb22 {
        %0 = %90;
        GOTO bb47;
    }
    bb23 {
        %40 = <error|()> %90;
        %4 = %40 is ();
        %4? bb24 : bb25;
    }
    bb24 {
        %39 = <()> %40;
        GOTO bb26;
    }
    bb25 {
        %8 = <error> %40;
        GOTO bb4;
    }
    bb26 {
        %110 = baz() -> bb27;
    }
    bb27 {
        %98 = %110 is ();
        %98? bb28 : bb29;
    }
    bb28 {
        %109 = <()> %110;
        GOTO bb30;
    }
    bb29 {
        %8 = <error> %110;
        GOTO bb4;
    }
    bb30 {
        %120 = foo() -> bb31;
    }
    bb31 {
        %4 = %120 is ();
        %4? bb32 : bb33;
    }
    bb32 {
        %119 = <()> %120;
        GOTO bb42;
    }
    bb33 {
        %8 = <error> %120;
        GOTO bb34;
    }
    bb34 {
        %128 = ConstLoad abc;
        %131 = foo() -> bb35;
    }
    bb35 {
        %98 = %131 is ();
        %98? bb36 : bb37;
    }
    bb36 {
        %130 = <()> %131;
        GOTO bb38;
    }
    bb37 {
        %8 = <error> %131;
        GOTO bb4;
    }
    bb38 {
        %141 = baz() -> bb39;
    }
    bb39 {
        %4 = %141 is ();
        %4? bb40 : bb41;
    }
    bb40 {
        %140 = <()> %141;
        GOTO bb46;
    }
    bb41 {
        %8 = <error> %141;
        GOTO bb4;
    }
    bb42 {
        %152 = baz() -> bb43;
    }
    bb43 {
        %98 = %152 is ();
        %98? bb44 : bb45;
    }
    bb44 {
        %151 = <()> %152;
        GOTO bb46;
    }
    bb45 {
        %8 = <error> %152;
        GOTO bb34;
    }
    bb46 {
        %0 = ConstLoad 0;
        GOTO bb47;
    }
    bb47 {
        return;
    }


}
